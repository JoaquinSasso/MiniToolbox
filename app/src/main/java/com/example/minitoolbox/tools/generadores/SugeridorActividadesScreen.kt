package com.example.minitoolbox.tools.generadores

import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.ContentCopy
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalHapticFeedback
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.launch
import kotlin.random.Random

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SugeridorActividadScreen(onBack: () -> Unit) {
    val actividades = listOf(
        "Lee un cap√≠tulo de un libro üìö",
        "Dibuja algo que te guste ‚úèÔ∏è",
        "Sal a caminar 10 minutos üö∂‚Äç‚ôÇÔ∏è",
        "Toma un vaso de agua üíß",
        "Haz 10 flexiones üí™",
        "Llama a un amigo üìû",
        "Ordena tu escritorio üßπ",
        "Busca una nueva canci√≥n para escuchar üéµ",
        "Medita durante 3 minutos üßò",
        "Haz una lista de agradecimientos üôè",
        "Escribe una idea para un proyecto nuevo üí°",
        "Prepara un snack saludable üçé",
        "Aprende una palabra nueva en otro idioma üåç",
        "Toma una foto creativa üì∏",
        "Descon√©ctate del celular por 15 minutos üìµ",
        "Haz una peque√±a limpieza en tu cuarto üõèÔ∏è",
        "Practica respiraci√≥n profunda üå¨Ô∏è",
        "Haz un gesto amable por alguien hoy ü§ó",
        "Organiza tu d√≠a con una lista de tareas üìù",
        "Saluda a alguien que no conoc√©s üëã",
        "Escribe tres cosas que te hacen feliz üòä",
        "Baila una canci√≥n que te guste üíÉ",
        "Mira un corto inspirador en internet üé¨",
        "Haz un estiramiento durante 5 minutos üßò‚Äç‚ôÇÔ∏è",
        "Escucha un podcast sobre un tema nuevo üéß",
        "T√≥mate un t√© relajante ‚òïÔ∏è",
        "Revisa y limpia tus emails üìß",
        "Planifica un viaje imaginario üó∫Ô∏è",
        "Escribe una peque√±a poes√≠a ‚úçÔ∏è",
        "Prueba una receta sencilla y r√°pida üçΩÔ∏è",
        "Dedica 5 minutos a observar el cielo üå§Ô∏è",
        "Riega tus plantas üå±",
        "Haz un dibujo con los ojos cerrados üé®",
        "Busca un dato curioso sobre historia üìñ",
        "Escribe tres objetivos semanales üóíÔ∏è",
        "Haz una pausa y sonr√≠e por 30 segundos üòä",
        "Organiza tu biblioteca o estante üìï",
        "Escribe algo positivo sobre ti mismo üíñ",
        "Juega un minijuego de ingenio üß©",
        "Escucha sonidos de la naturaleza üå≥",
        "Recuerda un momento divertido üòÑ",
        "Planifica una actividad para el fin de semana üìÖ",
        "Escribe una carta breve a tu futuro t√∫ üì®",
        "Haz una pausa para observar tu entorno üëÄ",
        "Busca inspiraci√≥n en im√°genes bonitas üì∑",
        "Practica un poco de yoga simple üßò",
        "Intenta hacer malabares con objetos peque√±os ü§π",
        "Haz una donaci√≥n simb√≥lica o ayuda online üåü",
        "Aprende sobre una cultura distinta üåé",
        "Prueba una fruta que no sueles comer üçç",
        "Prepara una bebida refrescante üçπ",
        "Escribe sobre algo que te gustar√≠a aprender üñãÔ∏è",
        "Organiza una peque√±a reuni√≥n virtual con amigos üíª",
        "Saca la basura o recicla algo ‚ôªÔ∏è",
        "Escribe una frase inspiradora para compartir ‚ú®",
        "Busca una cita motivacional üìå",
        "Dedica tiempo a cuidar tu piel üßñ",
        "Escribe o dibuja sobre un sue√±o reciente üí§",
        "Pasa tiempo con tu mascota o animal favorito üê∂",
        "Haz una pausa consciente sin hacer nada üôå",
        "Busca formas creativas de reutilizar un objeto üîÑ",
        "Explora una afici√≥n que hayas olvidado üé≠",
        "Observa el atardecer o amanecer üåÖ",
        "Visita virtualmente un museo o galer√≠a üñºÔ∏è",
        "Dale mantenimiento o limpieza a tu bicicleta üö≤",
        "Revisa y actualiza tus objetivos personales üéØ",
        "Haz un breve ejercicio visual para descansar la vista üëÅÔ∏è",
        "Prueba escribir con la mano no dominante ‚úçÔ∏è",
        "Escucha m√∫sica relajante durante 5 minutos üé∂",
        "Haz una peque√±a lista de cosas por soltar üöÆ",
        "Prepara algo creativo con materiales reciclados ‚ôªÔ∏è",
        "Busca una an√©cdota inspiradora o divertida üåü",
        "Piensa en tres logros recientes que has tenido üèÜ",
        "Comparte algo positivo en redes sociales üì≤",
        "Juega a tu videojuego favorito üéÆ",
        "Mira una pelicula o serie que no has visto üì∫",
        "Mira un documental üêÜ"
    )

    var actividadActual by remember { mutableStateOf(actividades.random()) }
    var showInfo by remember { mutableStateOf(false) }

    val clipboardManager = LocalClipboardManager.current
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val haptic = LocalHapticFeedback.current

    fun nuevaActividad() {
        haptic.performHapticFeedback(HapticFeedbackType.LongPress)
        val otras = actividades.filter { it != actividadActual }
        actividadActual = if (otras.isNotEmpty()) otras.random() else actividades.random()
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Sugeridor de Actividades") },
                navigationIcon = {
                    IconButton(onClick = {
                        haptic.performHapticFeedback(HapticFeedbackType.LongPress)
                        onBack()
                    }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Volver")
                    }
                },
                actions = {
                    IconButton(onClick = {
                        haptic.performHapticFeedback(HapticFeedbackType.LongPress)
                        showInfo = true
                    }) {
                        Icon(Icons.Filled.Info, contentDescription = "Informaci√≥n")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                )
            )
        },
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(32.dp, Alignment.Top),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(Modifier.height(12.dp))
            Text(
                "¬øQu√© podr√≠as hacer ahora?",
                fontSize = 20.sp,
                color = MaterialTheme.colorScheme.primary
            )
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceContainer
                ),
                elevation = CardDefaults.cardElevation(8.dp)
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(28.dp)
                        .heightIn(min = 90.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        actividadActual,
                        fontSize = 22.sp,
                        color = MaterialTheme.colorScheme.onSurface,
                        modifier = Modifier.padding(2.dp)
                    )
                }
            }
            Row(
                horizontalArrangement = Arrangement.Center,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Button(
                    onClick = { nuevaActividad() }
                ) {
                    Icon(Icons.Default.Refresh, contentDescription = "Otra sugerencia")
                    Spacer(Modifier.width(4.dp))
                    Text("Otra sugerencia")
                }
                Spacer(Modifier.width(16.dp))
                Button(
                    onClick = {
                        haptic.performHapticFeedback(HapticFeedbackType.LongPress)
                        clipboardManager.setText(androidx.compose.ui.text.AnnotatedString(actividadActual))
                        scope.launch { snackbarHostState.showSnackbar("Actividad copiada") }
                    }
                ) {
                    Icon(Icons.Default.ContentCopy, contentDescription = "Copiar sugerencia")
                    Spacer(Modifier.width(4.dp))
                    Text("Copiar")
                }
            }
        }
    }

    if (showInfo) {
        AlertDialog(
            onDismissRequest = {
                haptic.performHapticFeedback(HapticFeedbackType.LongPress)
                showInfo = false
            },
            title = { Text("¬øPara qu√© sirve?") },
            text = {
                Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    Text("‚Ä¢ Te da ideas r√°pidas para hacer cuando no sab√©s qu√© hacer, quer√©s moverte o distraerte.")
                    Text("‚Ä¢ Usalo para romper la rutina, salir de un bloqueo, o encontrar un peque√±o desaf√≠o o descanso en tu d√≠a.")
                    Text("‚Ä¢ Pod√©s copiar la sugerencia para compartirla o anotarla.")
                    Text("‚Ä¢ Si no te convence la idea, toc√° ‚ÄúOtra sugerencia‚Äù.")
                }
            },
            confirmButton = {
                TextButton(onClick = {
                    haptic.performHapticFeedback(HapticFeedbackType.LongPress)
                    showInfo = false
                }) {
                    Text("Cerrar")
                }
            }
        )
    }
}
